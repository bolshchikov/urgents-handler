{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","webpackCompilationHash":"f76d03901ac3b8197fac","result":{"data":{"deck":{"id":"5c7f5bc0-623b-53ef-9e04-91f3e43a7fdf","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = github;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Oh shit, \", mdx(\"del\", {\n    parentName: \"h1\"\n  }, \"Yehuda\"), \" \", mdx(\"br\", null), \" \", mdx(\"inlineCode\", {\n    parentName: \"h1\"\n  }, \"<%= username%>\"), \" \", mdx(\"br\", null), \" has a problem!\"), mdx(\"p\", null, \"The art of handling urgent issues in production\"), mdx(\"hr\", null), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Handling urgents is not black magic. \", mdx(\"br\", null), \" It's a set of practices to mitigate the issues.\")), mdx(\"hr\", null), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Those practices can be formed into algorithm. \", mdx(\"br\", null), \" Pseudo code is a great way to express the algorithm. \", mdx(\"br\", null), \" (No monkeys this time \\uD83D\\uDE06)\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers title=\\\"Urgent handling algorithm\\\" subtitle=\\\"Looks little scary, I know, let's dive in\\\" file=../urgent-handler.js\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Urgent\",\n    \"handling\": true,\n    \"algorithm\\\"\": true,\n    \"subtitle\": \"\\\"Looks\",\n    \"little\": true,\n    \"scary,\": true,\n    \"I\": true,\n    \"know,\": true,\n    \"let's\": true,\n    \"dive\": true,\n    \"in\\\"\": true,\n    \"file\": \"../urgent-handler.js\"\n  }), \"import { addTicket } from './backlog';\\nimport { canPerformBasicAction } from './bi';\\nimport { fix } from './codebase';\\nimport { applyMitigationStrategy, MITIGATION_STRATEGIES } from './mitigations';\\nimport { analyzeImpact } from './monitoring';\\nimport { notifyUrgentChannel } from './notifications';\\nimport { canRollbackHelp } from './releases';\\n\\nfunction defineProblem(complain, monitoring) {\\n  const issue = {\\n    // some black magic here\\n  };\\n  const isMitigated = () => {\\n    // shows whether the current problem is resolved\\n  };\\n  const isSolved = () => {\\n    // shows whether the underlying reason is solved\\n  };\\n  return {\\n    issue,\\n    isMitigated,\\n    isSolved\\n  }\\n}\\n\\nfunction isReallyUrgent(issue) {\\n  const impact = analyzeImpact(issue);\\n  if (impact >= '5% of all users' || impact >= '50% of the same company') {\\n    return true;\\n  }\\n  if (!canPerformBasicAction(issue)) {\\n    return true;\\n  }\\n  return false;\\n}\\n\\nfunction mitigateUrgent(issue) {\\n  const mitigated = false;\\n  if (canRollbackHelp(issue)) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.ROLLBACK); // 1. the quickest\\n  }\\n  if (!mitigated) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.DATA_FIX); // 2. second quickest but little but risky\\n  }\\n  if (!mitigated) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.HOT_FIX); // 3. takes time\\n  }\\n  return mitigated;\\n}\\n\\nfunction main(complain, monitoring) {\\n  console.warn('Take a deep breath');\\n\\n  const { issue, isMitigated, isSolved } = defineProblem(complain, monitoring);\\n\\n  if (!isReallyUrgent(issue)) {\\n    return;\\n  }\\n\\n  notifyUrgentChannel(); // don't try to solve urgent alone. Take at least 1 more person with you.\\n\\n  let mitigationAttempt = 0;\\n  let MAX_MITIGATION_ATTEMPTS = MITIGATION_STRATEGIES.length;\\n\\n  // the main difference between mitigation and solution\\n  // mitigation solves one specific use case\\n  // in case of urgent, it's more important\\n  // mitigate first, then solve\\n  while (!isMitigated(issue) || mitigationAttempt <= MAX_MITIGATION_ATTEMPTS) {\\n    mitigateUrgent(issue);\\n    mitigationAttempt += 1;\\n  }\\n\\n  if (!isSolved(issue)) {\\n    fix() // 4. if all previous options failed\\n  }\\n\\n  deploy();\\n  confirmResolution();\\n  notifyUrgentChannel();\\n\\n}\\n\\nexport default main;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"51:82 subtitle=\\\"The main function\\\"\",\n    \"51:82\": true,\n    \"subtitle\": \"\\\"The\",\n    \"main\": true,\n    \"function\\\"\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"51:82 showNumbers subtitle=\\\"The main function\\\" file=../urgent-handler.js\",\n    \"51:82\": true,\n    \"showNumbers\": true,\n    \"subtitle\": \"\\\"The\",\n    \"main\": true,\n    \"function\\\"\": true,\n    \"file\": \"../urgent-handler.js\"\n  }), \"import { addTicket } from './backlog';\\nimport { canPerformBasicAction } from './bi';\\nimport { fix } from './codebase';\\nimport { applyMitigationStrategy, MITIGATION_STRATEGIES } from './mitigations';\\nimport { analyzeImpact } from './monitoring';\\nimport { notifyUrgentChannel } from './notifications';\\nimport { canRollbackHelp } from './releases';\\n\\nfunction defineProblem(complain, monitoring) {\\n  const issue = {\\n    // some black magic here\\n  };\\n  const isMitigated = () => {\\n    // shows whether the current problem is resolved\\n  };\\n  const isSolved = () => {\\n    // shows whether the underlying reason is solved\\n  };\\n  return {\\n    issue,\\n    isMitigated,\\n    isSolved\\n  }\\n}\\n\\nfunction isReallyUrgent(issue) {\\n  const impact = analyzeImpact(issue);\\n  if (impact >= '5% of all users' || impact >= '50% of the same company') {\\n    return true;\\n  }\\n  if (!canPerformBasicAction(issue)) {\\n    return true;\\n  }\\n  return false;\\n}\\n\\nfunction mitigateUrgent(issue) {\\n  const mitigated = false;\\n  if (canRollbackHelp(issue)) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.ROLLBACK); // 1. the quickest\\n  }\\n  if (!mitigated) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.DATA_FIX); // 2. second quickest but little but risky\\n  }\\n  if (!mitigated) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.HOT_FIX); // 3. takes time\\n  }\\n  return mitigated;\\n}\\n\\nfunction main(complain, monitoring) {\\n  console.warn('Take a deep breath');\\n\\n  const { issue, isMitigated, isSolved } = defineProblem(complain, monitoring);\\n\\n  if (!isReallyUrgent(issue)) {\\n    return;\\n  }\\n\\n  notifyUrgentChannel(); // don't try to solve urgent alone. Take at least 1 more person with you.\\n\\n  let mitigationAttempt = 0;\\n  let MAX_MITIGATION_ATTEMPTS = MITIGATION_STRATEGIES.length;\\n\\n  // the main difference between mitigation and solution\\n  // mitigation solves one specific use case\\n  // in case of urgent, it's more important\\n  // mitigate first, then solve\\n  while (!isMitigated(issue) || mitigationAttempt <= MAX_MITIGATION_ATTEMPTS) {\\n    mitigateUrgent(issue);\\n    mitigationAttempt += 1;\\n  }\\n\\n  if (!isSolved(issue)) {\\n    fix() // 4. if all previous options failed\\n  }\\n\\n  deploy();\\n  confirmResolution();\\n  notifyUrgentChannel();\\n\\n}\\n\\nexport default main;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"51[14:35] subtitle=\\\"Urgent comes from 2 places\\\"\",\n    \"51[14:35]\": true,\n    \"subtitle\": \"\\\"Urgent\",\n    \"comes\": true,\n    \"from\": true,\n    \"places\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"52\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"52 subtitle=\\\"And when it comes, do not panic\\\"\",\n    \"subtitle\": \"\\\"And\",\n    \"when\": true,\n    \"it\": true,\n    \"comes,\": true,\n    \"do\": true,\n    \"not\": true,\n    \"panic\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"54\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"54 subtitle=\\\"Distill user complain into real an issue\\\"\",\n    \"subtitle\": \"\\\"Distill\",\n    \"user\": true,\n    \"complain\": true,\n    \"into\": true,\n    \"real\": true,\n    \"an\": true,\n    \"issue\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"9:24 subtitle=\\\"Distill user complain into real an issue\\\"\",\n    \"9:24\": true,\n    \"subtitle\": \"\\\"Distill\",\n    \"user\": true,\n    \"complain\": true,\n    \"into\": true,\n    \"real\": true,\n    \"an\": true,\n    \"issue\\\"\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"9:24 showNumbers subtitle=\\\"Distill user complain into real an issue\\\" file=../urgent-handler.js\",\n    \"9:24\": true,\n    \"showNumbers\": true,\n    \"subtitle\": \"\\\"Distill\",\n    \"user\": true,\n    \"complain\": true,\n    \"into\": true,\n    \"real\": true,\n    \"an\": true,\n    \"issue\\\"\": true,\n    \"file\": \"../urgent-handler.js\"\n  }), \"import { addTicket } from './backlog';\\nimport { canPerformBasicAction } from './bi';\\nimport { fix } from './codebase';\\nimport { applyMitigationStrategy, MITIGATION_STRATEGIES } from './mitigations';\\nimport { analyzeImpact } from './monitoring';\\nimport { notifyUrgentChannel } from './notifications';\\nimport { canRollbackHelp } from './releases';\\n\\nfunction defineProblem(complain, monitoring) {\\n  const issue = {\\n    // some black magic here\\n  };\\n  const isMitigated = () => {\\n    // shows whether the current problem is resolved\\n  };\\n  const isSolved = () => {\\n    // shows whether the underlying reason is solved\\n  };\\n  return {\\n    issue,\\n    isMitigated,\\n    isSolved\\n  }\\n}\\n\\nfunction isReallyUrgent(issue) {\\n  const impact = analyzeImpact(issue);\\n  if (impact >= '5% of all users' || impact >= '50% of the same company') {\\n    return true;\\n  }\\n  if (!canPerformBasicAction(issue)) {\\n    return true;\\n  }\\n  return false;\\n}\\n\\nfunction mitigateUrgent(issue) {\\n  const mitigated = false;\\n  if (canRollbackHelp(issue)) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.ROLLBACK); // 1. the quickest\\n  }\\n  if (!mitigated) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.DATA_FIX); // 2. second quickest but little but risky\\n  }\\n  if (!mitigated) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.HOT_FIX); // 3. takes time\\n  }\\n  return mitigated;\\n}\\n\\nfunction main(complain, monitoring) {\\n  console.warn('Take a deep breath');\\n\\n  const { issue, isMitigated, isSolved } = defineProblem(complain, monitoring);\\n\\n  if (!isReallyUrgent(issue)) {\\n    return;\\n  }\\n\\n  notifyUrgentChannel(); // don't try to solve urgent alone. Take at least 1 more person with you.\\n\\n  let mitigationAttempt = 0;\\n  let MAX_MITIGATION_ATTEMPTS = MITIGATION_STRATEGIES.length;\\n\\n  // the main difference between mitigation and solution\\n  // mitigation solves one specific use case\\n  // in case of urgent, it's more important\\n  // mitigate first, then solve\\n  while (!isMitigated(issue) || mitigationAttempt <= MAX_MITIGATION_ATTEMPTS) {\\n    mitigateUrgent(issue);\\n    mitigationAttempt += 1;\\n  }\\n\\n  if (!isSolved(issue)) {\\n    fix() // 4. if all previous options failed\\n  }\\n\\n  deploy();\\n  confirmResolution();\\n  notifyUrgentChannel();\\n\\n}\\n\\nexport default main;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"10:12 subtitle=\\\"Formulate the issue\\\"\",\n    \"10:12\": true,\n    \"subtitle\": \"\\\"Formulate\",\n    \"the\": true,\n    \"issue\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"13:15 subtitle=\\\"Know to validate that the complain is solved\\\"\",\n    \"13:15\": true,\n    \"subtitle\": \"\\\"Know\",\n    \"to\": true,\n    \"validate\": true,\n    \"that\": true,\n    \"the\": true,\n    \"complain\": true,\n    \"is\": true,\n    \"solved\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"16:18 subtitle=\\\"Know to validate that the issue is solved\\\"\",\n    \"16:18\": true,\n    \"subtitle\": \"\\\"Know\",\n    \"to\": true,\n    \"validate\": true,\n    \"that\": true,\n    \"the\": true,\n    \"issue\": true,\n    \"is\": true,\n    \"solved\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"54\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"54 subtitle=\\\"Distill user complain into real an issue\\\"\",\n    \"subtitle\": \"\\\"Distill\",\n    \"user\": true,\n    \"complain\": true,\n    \"into\": true,\n    \"real\": true,\n    \"an\": true,\n    \"issue\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"56:58 subtitle=\\\"The most important thing\\\"\",\n    \"56:58\": true,\n    \"subtitle\": \"\\\"The\",\n    \"most\": true,\n    \"important\": true,\n    \"thing\\\"\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"56:58 showNumbers subtitle=\\\"The most important thing\\\" file=../urgent-handler.js\",\n    \"56:58\": true,\n    \"showNumbers\": true,\n    \"subtitle\": \"\\\"The\",\n    \"most\": true,\n    \"important\": true,\n    \"thing\\\"\": true,\n    \"file\": \"../urgent-handler.js\"\n  }), \"import { addTicket } from './backlog';\\nimport { canPerformBasicAction } from './bi';\\nimport { fix } from './codebase';\\nimport { applyMitigationStrategy, MITIGATION_STRATEGIES } from './mitigations';\\nimport { analyzeImpact } from './monitoring';\\nimport { notifyUrgentChannel } from './notifications';\\nimport { canRollbackHelp } from './releases';\\n\\nfunction defineProblem(complain, monitoring) {\\n  const issue = {\\n    // some black magic here\\n  };\\n  const isMitigated = () => {\\n    // shows whether the current problem is resolved\\n  };\\n  const isSolved = () => {\\n    // shows whether the underlying reason is solved\\n  };\\n  return {\\n    issue,\\n    isMitigated,\\n    isSolved\\n  }\\n}\\n\\nfunction isReallyUrgent(issue) {\\n  const impact = analyzeImpact(issue);\\n  if (impact >= '5% of all users' || impact >= '50% of the same company') {\\n    return true;\\n  }\\n  if (!canPerformBasicAction(issue)) {\\n    return true;\\n  }\\n  return false;\\n}\\n\\nfunction mitigateUrgent(issue) {\\n  const mitigated = false;\\n  if (canRollbackHelp(issue)) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.ROLLBACK); // 1. the quickest\\n  }\\n  if (!mitigated) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.DATA_FIX); // 2. second quickest but little but risky\\n  }\\n  if (!mitigated) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.HOT_FIX); // 3. takes time\\n  }\\n  return mitigated;\\n}\\n\\nfunction main(complain, monitoring) {\\n  console.warn('Take a deep breath');\\n\\n  const { issue, isMitigated, isSolved } = defineProblem(complain, monitoring);\\n\\n  if (!isReallyUrgent(issue)) {\\n    return;\\n  }\\n\\n  notifyUrgentChannel(); // don't try to solve urgent alone. Take at least 1 more person with you.\\n\\n  let mitigationAttempt = 0;\\n  let MAX_MITIGATION_ATTEMPTS = MITIGATION_STRATEGIES.length;\\n\\n  // the main difference between mitigation and solution\\n  // mitigation solves one specific use case\\n  // in case of urgent, it's more important\\n  // mitigate first, then solve\\n  while (!isMitigated(issue) || mitigationAttempt <= MAX_MITIGATION_ATTEMPTS) {\\n    mitigateUrgent(issue);\\n    mitigationAttempt += 1;\\n  }\\n\\n  if (!isSolved(issue)) {\\n    fix() // 4. if all previous options failed\\n  }\\n\\n  deploy();\\n  confirmResolution();\\n  notifyUrgentChannel();\\n\\n}\\n\\nexport default main;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"26:35 subtitle=\\\"Failing here many time is the straight way for colleagues to hate you\\\"\",\n    \"26:35\": true,\n    \"subtitle\": \"\\\"Failing\",\n    \"here\": true,\n    \"many\": true,\n    \"time\": true,\n    \"is\": true,\n    \"the\": true,\n    \"straight\": true,\n    \"way\": true,\n    \"for\": true,\n    \"colleagues\": true,\n    \"to\": true,\n    \"hate\": true,\n    \"you\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"27\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"27 subtitle=\\\"Use monitoring to estimate the damage\\\"\",\n    \"subtitle\": \"\\\"Use\",\n    \"monitoring\": true,\n    \"to\": true,\n    \"estimate\": true,\n    \"the\": true,\n    \"damage\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"28[7:33] subtitle=\\\"To certain % of all users\\\"\",\n    \"28[7:33]\": true,\n    \"subtitle\": \"\\\"To\",\n    \"certain\": true,\n    \"%\": true,\n    \"of\": true,\n    \"all\": true,\n    \"users\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"28[38:72] subtitle=\\\"To large percent of % within the same company\\\"\",\n    \"28[38:72]\": true,\n    \"subtitle\": \"\\\"To\",\n    \"large\": true,\n    \"percent\": true,\n    \"of\": true,\n    \"%\": true,\n    \"within\": true,\n    \"the\": true,\n    \"same\": true,\n    \"company\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"29\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"29 subtitle=\\\"Definitely urgent\\\"\",\n    \"subtitle\": \"\\\"Definitely\",\n    \"urgent\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"31\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"31 subtitle=\\\"Impact is small but prevent the basic usage?\\\"\",\n    \"subtitle\": \"\\\"Impact\",\n    \"is\": true,\n    \"small\": true,\n    \"but\": true,\n    \"prevent\": true,\n    \"the\": true,\n    \"basic\": true,\n    \"usage?\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"32\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"32 subtitle=\\\"Also urgent\\\"\",\n    \"subtitle\": \"\\\"Also\",\n    \"urgent\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"34\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"34 subtitle=\\\"Anything else? Can go back to sleep\\\"\",\n    \"subtitle\": \"\\\"Anything\",\n    \"else?\": true,\n    \"Can\": true,\n    \"go\": true,\n    \"back\": true,\n    \"to\": true,\n    \"sleep\\\"\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"56:58 showNumbers subtitle=\\\"We were here\\\" file=../urgent-handler.js\",\n    \"56:58\": true,\n    \"showNumbers\": true,\n    \"subtitle\": \"\\\"We\",\n    \"were\": true,\n    \"here\\\"\": true,\n    \"file\": \"../urgent-handler.js\"\n  }), \"import { addTicket } from './backlog';\\nimport { canPerformBasicAction } from './bi';\\nimport { fix } from './codebase';\\nimport { applyMitigationStrategy, MITIGATION_STRATEGIES } from './mitigations';\\nimport { analyzeImpact } from './monitoring';\\nimport { notifyUrgentChannel } from './notifications';\\nimport { canRollbackHelp } from './releases';\\n\\nfunction defineProblem(complain, monitoring) {\\n  const issue = {\\n    // some black magic here\\n  };\\n  const isMitigated = () => {\\n    // shows whether the current problem is resolved\\n  };\\n  const isSolved = () => {\\n    // shows whether the underlying reason is solved\\n  };\\n  return {\\n    issue,\\n    isMitigated,\\n    isSolved\\n  }\\n}\\n\\nfunction isReallyUrgent(issue) {\\n  const impact = analyzeImpact(issue);\\n  if (impact >= '5% of all users' || impact >= '50% of the same company') {\\n    return true;\\n  }\\n  if (!canPerformBasicAction(issue)) {\\n    return true;\\n  }\\n  return false;\\n}\\n\\nfunction mitigateUrgent(issue) {\\n  const mitigated = false;\\n  if (canRollbackHelp(issue)) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.ROLLBACK); // 1. the quickest\\n  }\\n  if (!mitigated) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.DATA_FIX); // 2. second quickest but little but risky\\n  }\\n  if (!mitigated) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.HOT_FIX); // 3. takes time\\n  }\\n  return mitigated;\\n}\\n\\nfunction main(complain, monitoring) {\\n  console.warn('Take a deep breath');\\n\\n  const { issue, isMitigated, isSolved } = defineProblem(complain, monitoring);\\n\\n  if (!isReallyUrgent(issue)) {\\n    return;\\n  }\\n\\n  notifyUrgentChannel(); // don't try to solve urgent alone. Take at least 1 more person with you.\\n\\n  let mitigationAttempt = 0;\\n  let MAX_MITIGATION_ATTEMPTS = MITIGATION_STRATEGIES.length;\\n\\n  // the main difference between mitigation and solution\\n  // mitigation solves one specific use case\\n  // in case of urgent, it's more important\\n  // mitigate first, then solve\\n  while (!isMitigated(issue) || mitigationAttempt <= MAX_MITIGATION_ATTEMPTS) {\\n    mitigateUrgent(issue);\\n    mitigationAttempt += 1;\\n  }\\n\\n  if (!isSolved(issue)) {\\n    fix() // 4. if all previous options failed\\n  }\\n\\n  deploy();\\n  confirmResolution();\\n  notifyUrgentChannel();\\n\\n}\\n\\nexport default main;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"60\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"60 subtitle=\\\"Don't forget. Better don't solve urgent alone\\\"\",\n    \"subtitle\": \"\\\"Don't\",\n    \"forget.\": true,\n    \"Better\": true,\n    \"don't\": true,\n    \"solve\": true,\n    \"urgent\": true,\n    \"alone\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"62:72 subtitle=\\\"Let's start mitigation\\\"\",\n    \"62:72\": true,\n    \"subtitle\": \"\\\"Let's\",\n    \"start\": true,\n    \"mitigation\\\"\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"62:72 showNumbers subtitle=\\\"Let's start mitigation\\\" file=../urgent-handler.js\",\n    \"62:72\": true,\n    \"showNumbers\": true,\n    \"subtitle\": \"\\\"Let's\",\n    \"start\": true,\n    \"mitigation\\\"\": true,\n    \"file\": \"../urgent-handler.js\"\n  }), \"import { addTicket } from './backlog';\\nimport { canPerformBasicAction } from './bi';\\nimport { fix } from './codebase';\\nimport { applyMitigationStrategy, MITIGATION_STRATEGIES } from './mitigations';\\nimport { analyzeImpact } from './monitoring';\\nimport { notifyUrgentChannel } from './notifications';\\nimport { canRollbackHelp } from './releases';\\n\\nfunction defineProblem(complain, monitoring) {\\n  const issue = {\\n    // some black magic here\\n  };\\n  const isMitigated = () => {\\n    // shows whether the current problem is resolved\\n  };\\n  const isSolved = () => {\\n    // shows whether the underlying reason is solved\\n  };\\n  return {\\n    issue,\\n    isMitigated,\\n    isSolved\\n  }\\n}\\n\\nfunction isReallyUrgent(issue) {\\n  const impact = analyzeImpact(issue);\\n  if (impact >= '5% of all users' || impact >= '50% of the same company') {\\n    return true;\\n  }\\n  if (!canPerformBasicAction(issue)) {\\n    return true;\\n  }\\n  return false;\\n}\\n\\nfunction mitigateUrgent(issue) {\\n  const mitigated = false;\\n  if (canRollbackHelp(issue)) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.ROLLBACK); // 1. the quickest\\n  }\\n  if (!mitigated) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.DATA_FIX); // 2. second quickest but little but risky\\n  }\\n  if (!mitigated) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.HOT_FIX); // 3. takes time\\n  }\\n  return mitigated;\\n}\\n\\nfunction main(complain, monitoring) {\\n  console.warn('Take a deep breath');\\n\\n  const { issue, isMitigated, isSolved } = defineProblem(complain, monitoring);\\n\\n  if (!isReallyUrgent(issue)) {\\n    return;\\n  }\\n\\n  notifyUrgentChannel(); // don't try to solve urgent alone. Take at least 1 more person with you.\\n\\n  let mitigationAttempt = 0;\\n  let MAX_MITIGATION_ATTEMPTS = MITIGATION_STRATEGIES.length;\\n\\n  // the main difference between mitigation and solution\\n  // mitigation solves one specific use case\\n  // in case of urgent, it's more important\\n  // mitigate first, then solve\\n  while (!isMitigated(issue) || mitigationAttempt <= MAX_MITIGATION_ATTEMPTS) {\\n    mitigateUrgent(issue);\\n    mitigationAttempt += 1;\\n  }\\n\\n  if (!isSolved(issue)) {\\n    fix() // 4. if all previous options failed\\n  }\\n\\n  deploy();\\n  confirmResolution();\\n  notifyUrgentChannel();\\n\\n}\\n\\nexport default main;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"65:68 subtitle=\\\"Mitigation vs. Resolution\\\"\",\n    \"65:68\": true,\n    \"subtitle\": \"\\\"Mitigation\",\n    \"vs.\": true,\n    \"Resolution\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"69:72 subtitle=\\\"Try to mitigate\\\"\",\n    \"69:72\": true,\n    \"subtitle\": \"\\\"Try\",\n    \"to\": true,\n    \"mitigate\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"37:49 subtitle=\\\"Try to mitigate\\\"\",\n    \"37:49\": true,\n    \"subtitle\": \"\\\"Try\",\n    \"to\": true,\n    \"mitigate\\\"\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"37:49 showNumbers subtitle=\\\"3 main strategies of mitigation\\\" file=../urgent-handler.js\",\n    \"37:49\": true,\n    \"showNumbers\": true,\n    \"subtitle\": \"\\\"3\",\n    \"main\": true,\n    \"strategies\": true,\n    \"of\": true,\n    \"mitigation\\\"\": true,\n    \"file\": \"../urgent-handler.js\"\n  }), \"import { addTicket } from './backlog';\\nimport { canPerformBasicAction } from './bi';\\nimport { fix } from './codebase';\\nimport { applyMitigationStrategy, MITIGATION_STRATEGIES } from './mitigations';\\nimport { analyzeImpact } from './monitoring';\\nimport { notifyUrgentChannel } from './notifications';\\nimport { canRollbackHelp } from './releases';\\n\\nfunction defineProblem(complain, monitoring) {\\n  const issue = {\\n    // some black magic here\\n  };\\n  const isMitigated = () => {\\n    // shows whether the current problem is resolved\\n  };\\n  const isSolved = () => {\\n    // shows whether the underlying reason is solved\\n  };\\n  return {\\n    issue,\\n    isMitigated,\\n    isSolved\\n  }\\n}\\n\\nfunction isReallyUrgent(issue) {\\n  const impact = analyzeImpact(issue);\\n  if (impact >= '5% of all users' || impact >= '50% of the same company') {\\n    return true;\\n  }\\n  if (!canPerformBasicAction(issue)) {\\n    return true;\\n  }\\n  return false;\\n}\\n\\nfunction mitigateUrgent(issue) {\\n  const mitigated = false;\\n  if (canRollbackHelp(issue)) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.ROLLBACK); // 1. the quickest\\n  }\\n  if (!mitigated) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.DATA_FIX); // 2. second quickest but little but risky\\n  }\\n  if (!mitigated) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.HOT_FIX); // 3. takes time\\n  }\\n  return mitigated;\\n}\\n\\nfunction main(complain, monitoring) {\\n  console.warn('Take a deep breath');\\n\\n  const { issue, isMitigated, isSolved } = defineProblem(complain, monitoring);\\n\\n  if (!isReallyUrgent(issue)) {\\n    return;\\n  }\\n\\n  notifyUrgentChannel(); // don't try to solve urgent alone. Take at least 1 more person with you.\\n\\n  let mitigationAttempt = 0;\\n  let MAX_MITIGATION_ATTEMPTS = MITIGATION_STRATEGIES.length;\\n\\n  // the main difference between mitigation and solution\\n  // mitigation solves one specific use case\\n  // in case of urgent, it's more important\\n  // mitigate first, then solve\\n  while (!isMitigated(issue) || mitigationAttempt <= MAX_MITIGATION_ATTEMPTS) {\\n    mitigateUrgent(issue);\\n    mitigationAttempt += 1;\\n  }\\n\\n  if (!isSolved(issue)) {\\n    fix() // 4. if all previous options failed\\n  }\\n\\n  deploy();\\n  confirmResolution();\\n  notifyUrgentChannel();\\n\\n}\\n\\nexport default main;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"39:41 subtitle=\\\"The easiest and fastest way to mitigate - rollback\\\"\",\n    \"39:41\": true,\n    \"subtitle\": \"\\\"The\",\n    \"easiest\": true,\n    \"and\": true,\n    \"fastest\": true,\n    \"way\": true,\n    \"to\": true,\n    \"mitigate\": true,\n    \"-\": true,\n    \"rollback\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"42:44 subtitle=\\\"Sometimes it's enough to fix the data in the DB\\\"\",\n    \"42:44\": true,\n    \"subtitle\": \"\\\"Sometimes\",\n    \"it's\": true,\n    \"enough\": true,\n    \"to\": true,\n    \"fix\": true,\n    \"the\": true,\n    \"data\": true,\n    \"in\": true,\n    \"DB\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"45:47 subtitle=\\\"If nothing helps - write an quick (ugly) fix\\\"\",\n    \"45:47\": true,\n    \"subtitle\": \"\\\"If\",\n    \"nothing\": true,\n    \"helps\": true,\n    \"-\": true,\n    \"write\": true,\n    \"an\": true,\n    \"quick\": true,\n    \"(ugly)\": true,\n    \"fix\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"48\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"48 subtitle=\\\"Managed to mitigate?\\\"\",\n    \"subtitle\": \"\\\"Managed\",\n    \"to\": true,\n    \"mitigate?\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"69:72 subtitle=\\\"In most cases we manage to mitigate\\\"\",\n    \"69:72\": true,\n    \"subtitle\": \"\\\"In\",\n    \"most\": true,\n    \"cases\": true,\n    \"we\": true,\n    \"manage\": true,\n    \"to\": true,\n    \"mitigate\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"74:76 subtitle=\\\"Sometimes we have to fix the underlying issue\\\"\",\n    \"74:76\": true,\n    \"subtitle\": \"\\\"Sometimes\",\n    \"we\": true,\n    \"have\": true,\n    \"to\": true,\n    \"fix\": true,\n    \"the\": true,\n    \"underlying\": true,\n    \"issue\\\"\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"74:76 showNumbers subtitle=\\\"The worst case that can happen but sometimes no other way\\\" file=../urgent-handler.js\",\n    \"74:76\": true,\n    \"showNumbers\": true,\n    \"subtitle\": \"\\\"The\",\n    \"worst\": true,\n    \"case\": true,\n    \"that\": true,\n    \"can\": true,\n    \"happen\": true,\n    \"but\": true,\n    \"sometimes\": true,\n    \"no\": true,\n    \"other\": true,\n    \"way\\\"\": true,\n    \"file\": \"../urgent-handler.js\"\n  }), \"import { addTicket } from './backlog';\\nimport { canPerformBasicAction } from './bi';\\nimport { fix } from './codebase';\\nimport { applyMitigationStrategy, MITIGATION_STRATEGIES } from './mitigations';\\nimport { analyzeImpact } from './monitoring';\\nimport { notifyUrgentChannel } from './notifications';\\nimport { canRollbackHelp } from './releases';\\n\\nfunction defineProblem(complain, monitoring) {\\n  const issue = {\\n    // some black magic here\\n  };\\n  const isMitigated = () => {\\n    // shows whether the current problem is resolved\\n  };\\n  const isSolved = () => {\\n    // shows whether the underlying reason is solved\\n  };\\n  return {\\n    issue,\\n    isMitigated,\\n    isSolved\\n  }\\n}\\n\\nfunction isReallyUrgent(issue) {\\n  const impact = analyzeImpact(issue);\\n  if (impact >= '5% of all users' || impact >= '50% of the same company') {\\n    return true;\\n  }\\n  if (!canPerformBasicAction(issue)) {\\n    return true;\\n  }\\n  return false;\\n}\\n\\nfunction mitigateUrgent(issue) {\\n  const mitigated = false;\\n  if (canRollbackHelp(issue)) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.ROLLBACK); // 1. the quickest\\n  }\\n  if (!mitigated) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.DATA_FIX); // 2. second quickest but little but risky\\n  }\\n  if (!mitigated) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.HOT_FIX); // 3. takes time\\n  }\\n  return mitigated;\\n}\\n\\nfunction main(complain, monitoring) {\\n  console.warn('Take a deep breath');\\n\\n  const { issue, isMitigated, isSolved } = defineProblem(complain, monitoring);\\n\\n  if (!isReallyUrgent(issue)) {\\n    return;\\n  }\\n\\n  notifyUrgentChannel(); // don't try to solve urgent alone. Take at least 1 more person with you.\\n\\n  let mitigationAttempt = 0;\\n  let MAX_MITIGATION_ATTEMPTS = MITIGATION_STRATEGIES.length;\\n\\n  // the main difference between mitigation and solution\\n  // mitigation solves one specific use case\\n  // in case of urgent, it's more important\\n  // mitigate first, then solve\\n  while (!isMitigated(issue) || mitigationAttempt <= MAX_MITIGATION_ATTEMPTS) {\\n    mitigateUrgent(issue);\\n    mitigationAttempt += 1;\\n  }\\n\\n  if (!isSolved(issue)) {\\n    fix() // 4. if all previous options failed\\n  }\\n\\n  deploy();\\n  confirmResolution();\\n  notifyUrgentChannel();\\n\\n}\\n\\nexport default main;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"78\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"78 subtitle=\\\"Deploy the fix\\\"\",\n    \"subtitle\": \"\\\"Deploy\",\n    \"the\": true,\n    \"fix\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"79\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"79 subtitle=\\\"Confirm w/ QA that the issue is fixed, deploy with customer too\\\"\",\n    \"subtitle\": \"\\\"Confirm\",\n    \"w/\": true,\n    \"QA\": true,\n    \"that\": true,\n    \"the\": true,\n    \"issue\": true,\n    \"is\": true,\n    \"fixed,\": true,\n    \"deploy\": true,\n    \"with\": true,\n    \"customer\": true,\n    \"too\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"80\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"80 subtitle=\\\"Update others\\\"\",\n    \"subtitle\": \"\\\"Update\",\n    \"others\\\"\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers title=\\\"Urgent handling algorithm\\\" subtitle=\\\"Still scared?\\\" file=../urgent-handler.js\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Urgent\",\n    \"handling\": true,\n    \"algorithm\\\"\": true,\n    \"subtitle\": \"\\\"Still\",\n    \"scared?\\\"\": true,\n    \"file\": \"../urgent-handler.js\"\n  }), \"import { addTicket } from './backlog';\\nimport { canPerformBasicAction } from './bi';\\nimport { fix } from './codebase';\\nimport { applyMitigationStrategy, MITIGATION_STRATEGIES } from './mitigations';\\nimport { analyzeImpact } from './monitoring';\\nimport { notifyUrgentChannel } from './notifications';\\nimport { canRollbackHelp } from './releases';\\n\\nfunction defineProblem(complain, monitoring) {\\n  const issue = {\\n    // some black magic here\\n  };\\n  const isMitigated = () => {\\n    // shows whether the current problem is resolved\\n  };\\n  const isSolved = () => {\\n    // shows whether the underlying reason is solved\\n  };\\n  return {\\n    issue,\\n    isMitigated,\\n    isSolved\\n  }\\n}\\n\\nfunction isReallyUrgent(issue) {\\n  const impact = analyzeImpact(issue);\\n  if (impact >= '5% of all users' || impact >= '50% of the same company') {\\n    return true;\\n  }\\n  if (!canPerformBasicAction(issue)) {\\n    return true;\\n  }\\n  return false;\\n}\\n\\nfunction mitigateUrgent(issue) {\\n  const mitigated = false;\\n  if (canRollbackHelp(issue)) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.ROLLBACK); // 1. the quickest\\n  }\\n  if (!mitigated) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.DATA_FIX); // 2. second quickest but little but risky\\n  }\\n  if (!mitigated) {\\n    mitigated = applyMitigationStrategy(MITIGATION_STRATEGIES.HOT_FIX); // 3. takes time\\n  }\\n  return mitigated;\\n}\\n\\nfunction main(complain, monitoring) {\\n  console.warn('Take a deep breath');\\n\\n  const { issue, isMitigated, isSolved } = defineProblem(complain, monitoring);\\n\\n  if (!isReallyUrgent(issue)) {\\n    return;\\n  }\\n\\n  notifyUrgentChannel(); // don't try to solve urgent alone. Take at least 1 more person with you.\\n\\n  let mitigationAttempt = 0;\\n  let MAX_MITIGATION_ATTEMPTS = MITIGATION_STRATEGIES.length;\\n\\n  // the main difference between mitigation and solution\\n  // mitigation solves one specific use case\\n  // in case of urgent, it's more important\\n  // mitigate first, then solve\\n  while (!isMitigated(issue) || mitigationAttempt <= MAX_MITIGATION_ATTEMPTS) {\\n    mitigateUrgent(issue);\\n    mitigationAttempt += 1;\\n  }\\n\\n  if (!isSolved(issue)) {\\n    fix() // 4. if all previous options failed\\n  }\\n\\n  deploy();\\n  confirmResolution();\\n  notifyUrgentChannel();\\n\\n}\\n\\nexport default main;\\n\"))), mdx(\"hr\", null), mdx(\"p\", null, \"Questions?\"), mdx(\"hr\", null), mdx(\"p\", null, \"Thanks!\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"5c7f5bc0-623b-53ef-9e04-91f3e43a7fdf","slug":"","title":"Oh shit, Yehuda <br/> <%= username%> <br /> has a problem!"}}}